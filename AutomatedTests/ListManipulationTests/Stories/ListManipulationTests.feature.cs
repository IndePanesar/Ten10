// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.2.0.0
//      SpecFlow Generator Version:2.2.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace TT_AutomatedTests.ListManipulationTests.Stories
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.2.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class Ten10ListManipulationTestsFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private Microsoft.VisualStudio.TestTools.UnitTesting.TestContext _testContext;
        
#line 1 "ListManipulationTests.feature"
#line hidden
        
        public virtual Microsoft.VisualStudio.TestTools.UnitTesting.TestContext TestContext
        {
            get
            {
                return this._testContext;
            }
            set
            {
                this._testContext = value;
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner(null, 0);
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Ten10 List manipulation tests", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Title != "Ten10 List manipulation tests")))
            {
                global::TT_AutomatedTests.ListManipulationTests.Stories.Ten10ListManipulationTestsFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Microsoft.VisualStudio.TestTools.UnitTesting.TestContext>(TestContext);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void IWantToGetTheFirstLongestOrderedListFromAListOfRandomNumbers(string unordered, string sublist, string size, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("I want to get the first longest ordered list from a list of random numbers", exampleTags);
#line 2
this.ScenarioSetup(scenarioInfo);
#line 3
testRunner.Given(string.Format("I have a list of unorderd integers \'{0}\'", unordered), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 4
testRunner.When("I process the list for the largest orderd list", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 5
testRunner.Then(string.Format("I am given the first largest sublist and its size as \'{0}\' \'{1}\'", sublist, size), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("I want to get the first longest ordered list from a list of random numbers: 1,2,3" +
            ",4,5,6,4,3,5,7,84,100,100")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Ten10 List manipulation tests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "1,2,3,4,5,6,4,3,5,7,84,100,100")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:unordered", "1,2,3,4,5,6,4,3,5,7,84,100,100")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:sublist", "1,2,3,4,5,6")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:size", "6")]
        public virtual void IWantToGetTheFirstLongestOrderedListFromAListOfRandomNumbers_123456435784100100()
        {
#line 2
this.IWantToGetTheFirstLongestOrderedListFromAListOfRandomNumbers("1,2,3,4,5,6,4,3,5,7,84,100,100", "1,2,3,4,5,6", "6", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("I want to get the first longest ordered list from a list of random numbers: 1, 3," +
            " 5, 6, 3, 5, 6, 7, 8, 9, 0, 9")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Ten10 List manipulation tests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "1, 3, 5, 6, 3, 5, 6, 7, 8, 9, 0, 9")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:unordered", "1, 3, 5, 6, 3, 5, 6, 7, 8, 9, 0, 9")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:sublist", "3,5,6,7,8,9")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:size", "6")]
        public virtual void IWantToGetTheFirstLongestOrderedListFromAListOfRandomNumbers_135635678909()
        {
#line 2
this.IWantToGetTheFirstLongestOrderedListFromAListOfRandomNumbers("1, 3, 5, 6, 3, 5, 6, 7, 8, 9, 0, 9", "3,5,6,7,8,9", "6", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("I want to get the first longest ordered list from a list of random numbers: 1, 2," +
            " 3, 4, 5, 6")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Ten10 List manipulation tests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "1, 2, 3, 4, 5, 6")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:unordered", "1, 2, 3, 4, 5, 6")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:sublist", "1,2,3,4,5,6")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:size", "6")]
        public virtual void IWantToGetTheFirstLongestOrderedListFromAListOfRandomNumbers_123456()
        {
#line 2
this.IWantToGetTheFirstLongestOrderedListFromAListOfRandomNumbers("1, 2, 3, 4, 5, 6", "1,2,3,4,5,6", "6", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("I want to get the first longest ordered list from a list of random numbers: 0, 0," +
            " 0, 0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Ten10 List manipulation tests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "0, 0, 0, 0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:unordered", "0, 0, 0, 0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:sublist", "0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:size", "1")]
        public virtual void IWantToGetTheFirstLongestOrderedListFromAListOfRandomNumbers_0000()
        {
#line 2
this.IWantToGetTheFirstLongestOrderedListFromAListOfRandomNumbers("0, 0, 0, 0", "0", "1", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("I want to get the first longest ordered list from a list of random numbers: -1, -" +
            "2, -3, -2, -1, 0, 1, 5,199")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Ten10 List manipulation tests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "-1, -2, -3, -2, -1, 0, 1, 5,199")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:unordered", "-1, -2, -3, -2, -1, 0, 1, 5,199")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:sublist", "-3,-2,-1,0,1,5,199")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:size", "7")]
        public virtual void IWantToGetTheFirstLongestOrderedListFromAListOfRandomNumbers_1_2_3_2_1015199()
        {
#line 2
this.IWantToGetTheFirstLongestOrderedListFromAListOfRandomNumbers("-1, -2, -3, -2, -1, 0, 1, 5,199", "-3,-2,-1,0,1,5,199", "7", ((string[])(null)));
#line hidden
        }
    }
}
#pragma warning restore
#endregion
